{
    "folders": [
        "webapp",
        "tests"
    ],
    "include_patterns": [
        "public/*",
        "*.js",
        "*.ts"
    ],
    "exclude_patterns": [
        "node_modules/*",
        "dist/libs/*",
        "webapp/public/libs/*"
    ],
    "license": "MIT - See LICENSE file",
    "project": "Scrutiny Debugger",
    "repo": "github.com/scrutinydebugger/scrutiny-gui-webapp",
    "copyright_owner": "Scrutiny Debugger",
    "copyright_start_date": "2021",
    "files": {
        "webapp/ui.ts": {
            "docstring": "User interface module that can take the application data and assign it to the correct DOM element."
        },
        "webapp/app.ts": {
            "docstring": "The main Scrutiny application"
        },
        "webapp/base_widget.ts": {
            "docstring": "An interface for all widget classes"
        },
        "webapp/datastore.ts": {
            "docstring": "A datastore for all watchable items that the server broadcast. Keeps the value and notify subscribers (widget windows) on value change"
        },
        "webapp/global_definitions.ts": {
            "docstring": "Some definitions used project wide"
        },
        "webapp/logging.ts": {
            "docstring": "A python like logging module that allows fine-grain control over logging"
        },
        "webapp/scrutiny-main.ts": {
            "docstring": "Entry point for the web project. Initialize the Scrutiny app and binds it to the window."
        },
        "webapp/server_api.ts": {
            "docstring": "Definitions of the server websocket API"
        },
        "webapp/server_connection.ts": {
            "docstring": "Handles the communication with the server"
        },
        "webapp/tools.ts": {
            "docstring": "Some tools used project wide"
        },
        "webapp/tree.ts": {
            "docstring": "A Tree structure that can store object associated with a path in the /aaa/bbb/ccc format.\nAllow log complexity when searching"
        },
        "webapp/components/scrutiny-resizable-table/scrutiny-resizable-table.ts": {
            "docstring": "A JQuery plugin that can be added on a Table element to make the columns resizable"
        },
        "webapp/components/scrutiny-treetable/scrutiny-treetable.ts": {
            "docstring": "A JQuery plugin that allows making a table act as a tree.\nCustom made tree-table widget because all the one out there were either behind a paid license or buggy and/or deprecated and/or not tailored to our need."
        },
        "webapp/widgets/watch/watch.ts": {
            "docstring": "Watch window widget. Its job is to display the value of watchables items.  Items can be dragged from other watch widget or from VarList widget"
        },
        "tests/fake_app.ts": {
            "docstring": "Stubbed Application class for unit testing"
        },
        "tests/testing_tools.ts": {
            "docstring": "Some global tools for testing framework"
        },
        "webapp/widgets/varlist/varlist.ts": {
            "docstring": "A widget that shows the list of available watchables in the server in a tree-like structure"
        },
        "tests/test_datastore.test.ts": {
            "docstring": "Unit tests for the Datastore class"
        },
        "tests/test_fake_app.test.ts": {
            "docstring": "Unit tests for the FakeApp class that stubs the application"
        },
        "tests/test_tree.test.ts": {
            "docstring": "Unit tests for the Tree storage class"
        },
        "tests/dom_testing_tools.ts": {
            "docstring": "Some testing tools dedicated to DOM handling"
        },
        "tests/components/scrutiny-treetable/test_treetable_tools.ts": {
            "docstring": "Some tools that provides helpers for quick testing of the tree table plugin"
        },
        "tests/components/scrutiny-treetable/test_treetable.test.ts": {
            "docstring": "Test suite for the tree table plugin"
        },
        "webapp/chartjs_custom_plugins.ts": {
            "docstring": "Some custom made Chart.js plugins used within the application"
        },
        "webapp/scrutiny-testbench.ts": {
            "docstring": "Internal test file"
        },
        "webapp/widgets/common.ts": {
            "docstring": "Some common elements shared across widget such as watchable table rows or testbox."
        },
        "webapp/widgets/graph/graph.ts": {
            "docstring": "Graph widget"
        },
        "webapp/components/scrutiny-focusable/scrutiny-focusable.ts": {
            "docstring": "Component allowing to make any HTML element focusable using a custom event. Focus are controlled by group meaning 2 items can have focused if they do not share a common root."
        },
        "webapp/components/scrutiny-objtextbox/scrutiny-objtextbox.ts": {
            "docstring": "Component making a textbox convertible into any element that represent a custom object. Mainly used to drop watchable into textbox"
        },
        "webapp/components/scrutiny-live-edit/scrutiny-live-edit.ts": {
            "docstring": "Make a field live-editable by switch the content to a textbox on double click"
        }
    }
}