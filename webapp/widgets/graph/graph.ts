//    graph.ts
//        Graph widget
//
//   - License : MIT - See LICENSE file.
//   - Project : Scrutiny Debugger (github.com/scrutinydebugger/scrutiny-gui-webapp)
//
//   Copyright (c) 2021-2023 Scrutiny Debugger

import { BaseWidget } from "@src/base_widget"
import { App } from "@src/app"
import * as logging from "@src/logging"
import { default as $ } from "jquery"
import { number2str, trim, force_input_int, force_input_float } from "@src/tools"
import * as API from "@src/server_api"
import { configure_all_tooltips } from "@src/ui"
import { CLASS_LIVE_EDIT_CONTENT, JQueryLiveEdit } from "@scrutiny-live-edit"
import { WatchableTableInterface, WatchableTextbox, NameEntryPair } from "@src/widgets/common"
import { Chart, ChartConfiguration, ChartDataset, LegendItem } from "chart.js/auto"
import zoomPlugin from "chartjs-plugin-zoom"
import { RemoveUnusedAxesPlugin, DrawTriggerPlugin } from "@src/chartjs_custom_plugins"
import { set_nested } from "@src/tools"
import * as multiselect from "@scrutiny-multiselect"
import { default as Split } from "split.js"

import {
    scrutiny_treetable,
    PluginOptions as TreeTableOptions,
    TransferScope,
    TransferPolicy,
    TransferFunctionMetadata,
    TransferFunctionOutput,
    TransferCompleteEventData,
} from "@scrutiny-treetable"
import { scrutiny_resizable_table, PluginOptions as ResizableTableOptions } from "@scrutiny-resizable-table"
import { JQueryObjTextbox } from "@scrutiny-objtextbox"

type ActiveTab = "configure" | "graph" | "browse"
type ZoomDir = "x" | "y" | "xy"

const payload = {
    cmd: "read_datalogging_acquisition_content_response",
    reqid: 111,
    reference_id: "30364187463f4f10a49d061cb1f5abd3",
    trigger_index: 300,
    signals: [
        {
            name: "counter_var",
            logged_element: "/alias/counter_var",
            data: [
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0, 738.0,
                738.0, 738.0, 738.0, 738.0, 739.0, 740.0, 741.0, 742.0, 743.0, 744.0, 745.0, 746.0, 747.0, 748.0, 749.0, 750.0, 751.0,
                752.0, 753.0, 754.0, 755.0, 756.0, 757.0, 758.0, 759.0, 760.0, 761.0, 762.0, 763.0, 764.0, 765.0, 766.0, 767.0, 768.0,
                769.0, 770.0, 771.0, 772.0, 773.0, 774.0, 775.0, 776.0, 777.0, 778.0, 779.0, 780.0, 781.0, 782.0, 783.0, 784.0, 785.0,
                786.0, 787.0, 788.0, 789.0, 790.0, 791.0, 792.0, 793.0, 794.0, 795.0, 796.0, 797.0, 798.0, 799.0, 800.0, 801.0, 802.0,
                803.0, 804.0, 805.0, 806.0, 807.0, 808.0, 809.0, 810.0, 811.0, 812.0, 813.0, 814.0, 815.0, 816.0, 817.0, 818.0, 819.0,
                820.0, 821.0, 822.0, 823.0, 824.0, 825.0, 826.0, 827.0, 828.0, 829.0, 830.0, 831.0, 832.0, 833.0, 834.0, 835.0, 836.0,
                837.0, 838.0, 839.0, 840.0, 841.0, 842.0, 843.0, 844.0, 845.0, 846.0, 847.0, 848.0, 849.0, 850.0, 851.0, 852.0, 853.0,
                854.0, 855.0, 856.0, 857.0, 858.0, 859.0, 860.0, 861.0, 862.0, 863.0, 864.0, 865.0, 866.0, 867.0, 868.0, 869.0, 870.0,
                871.0, 872.0, 873.0, 874.0, 875.0, 876.0, 877.0, 878.0, 879.0, 880.0, 881.0, 882.0, 883.0, 884.0, 885.0, 886.0, 887.0,
                888.0, 889.0, 890.0, 891.0, 892.0, 893.0, 894.0, 895.0, 896.0, 897.0, 898.0, 899.0, 900.0, 901.0, 902.0, 903.0, 904.0,
                905.0, 906.0, 907.0, 908.0, 909.0, 910.0, 911.0, 912.0, 913.0, 914.0, 915.0, 916.0, 917.0, 918.0, 919.0, 920.0, 921.0,
                922.0, 923.0, 924.0, 925.0, 926.0, 927.0, 928.0, 929.0, 930.0, 931.0, 932.0, 933.0, 934.0, 935.0, 936.0, 937.0, 938.0,
                939.0, 940.0, 941.0, 942.0, 943.0, 944.0, 945.0, 946.0, 947.0, 948.0, 949.0, 950.0, 951.0, 952.0, 953.0, 954.0, 955.0,
                956.0, 957.0, 958.0, 959.0, 960.0, 961.0, 962.0, 963.0, 964.0, 965.0, 966.0, 967.0, 968.0, 969.0, 970.0, 971.0, 972.0,
                973.0, 974.0, 975.0, 976.0, 977.0, 978.0, 979.0, 980.0, 981.0, 982.0, 983.0, 984.0, 985.0, 986.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0,
                987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 987.0, 988.0, 989.0, 990.0,
                991.0, 992.0, 993.0, 994.0, 995.0, 996.0, 997.0, 998.0, 999.0, 1000.0, 1001.0, 1002.0, 1003.0, 1004.0, 1005.0, 1006.0,
                1007.0, 1008.0, 1009.0, 1010.0, 1011.0, 1012.0, 1013.0, 1014.0, 1015.0, 1016.0, 1017.0, 1018.0, 1019.0, 1020.0, 1021.0,
                1022.0, 1023.0, 1024.0, 1025.0, 1026.0, 1027.0, 1028.0, 1029.0, 1030.0, 1031.0, 1032.0, 1033.0, 1034.0, 1035.0, 1036.0,
                1037.0, 1038.0, 1039.0, 1040.0, 1041.0, 1042.0, 1043.0, 1044.0, 1045.0, 1046.0, 1047.0, 1048.0, 1049.0, 1050.0, 1051.0,
                1052.0, 1053.0, 1054.0, 1055.0, 1056.0, 1057.0, 1058.0, 1059.0, 1060.0, 1061.0, 1062.0, 1063.0, 1064.0, 1065.0, 1066.0,
                1067.0, 1068.0, 1069.0, 1070.0, 1071.0, 1072.0, 1073.0, 1074.0, 1075.0, 1076.0, 1077.0, 1078.0, 1079.0, 1080.0, 1081.0,
                1082.0, 1083.0, 1084.0, 1085.0, 1086.0, 1087.0, 1088.0, 1089.0, 1090.0, 1091.0, 1092.0, 1093.0, 1094.0, 1095.0, 1096.0,
                1097.0, 1098.0, 1099.0, 1100.0, 1101.0, 1102.0, 1103.0, 1104.0, 1105.0, 1106.0, 1107.0, 1108.0, 1109.0, 1110.0, 1111.0,
                1112.0, 1113.0, 1114.0, 1115.0, 1116.0, 1117.0, 1118.0, 1119.0, 1120.0, 1121.0, 1122.0, 1123.0, 1124.0, 1125.0, 1126.0,
                1127.0, 1128.0, 1129.0, 1130.0, 1131.0, 1132.0, 1133.0, 1134.0, 1135.0, 1136.0, 1137.0, 1138.0, 1139.0, 1140.0, 1141.0,
                1142.0, 1143.0, 1144.0, 1145.0, 1146.0, 1147.0, 1148.0, 1149.0, 1150.0, 1151.0, 1152.0, 1153.0, 1154.0, 1155.0, 1156.0,
                1157.0, 1158.0, 1159.0, 1160.0, 1161.0, 1162.0, 1163.0, 1164.0, 1165.0, 1166.0, 1167.0, 1168.0, 1169.0, 1170.0, 1171.0,
                1172.0, 1173.0, 1174.0, 1175.0, 1176.0, 1177.0, 1178.0, 1179.0, 1180.0, 1181.0, 1182.0, 1183.0, 1184.0, 1185.0, 1186.0,
                1187.0, 1188.0, 1189.0, 1190.0, 1191.0, 1192.0, 1193.0, 1194.0, 1195.0, 1196.0, 1197.0, 1198.0, 1199.0, 1200.0, 1201.0,
                1202.0, 1203.0, 1204.0, 1205.0, 1206.0, 1207.0, 1208.0, 1209.0, 1210.0, 1211.0, 1212.0, 1213.0, 1214.0, 1215.0, 1216.0,
                1217.0, 1218.0, 1219.0, 1220.0, 1221.0, 1222.0, 1223.0, 1224.0, 1225.0, 1226.0, 1227.0, 1228.0, 1229.0, 1230.0, 1231.0,
                1232.0, 1233.0, 1234.0, 1235.0, 1236.0, 1237.0, 1238.0, 1239.0, 1240.0, 1241.0, 1242.0, 1243.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0,
                1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1244.0, 1245.0, 1246.0, 1247.0,
                1248.0, 1249.0, 1250.0, 1251.0, 1252.0, 1253.0, 1254.0, 1255.0, 1256.0, 1257.0, 1258.0, 1259.0, 1260.0, 1261.0, 1262.0,
                1263.0, 1264.0, 1265.0, 1266.0, 1267.0, 1268.0, 1269.0, 1270.0, 1271.0, 1272.0, 1273.0, 1274.0, 1275.0, 1276.0, 1277.0,
                1278.0, 1279.0, 1280.0, 1281.0, 1282.0, 1283.0, 1284.0, 1285.0, 1286.0, 1287.0, 1288.0, 1289.0, 1290.0, 1291.0, 1292.0,
                1293.0, 1294.0, 1295.0, 1296.0, 1297.0, 1298.0, 1299.0, 1300.0, 1301.0, 1302.0, 1303.0, 1304.0, 1305.0, 1306.0, 1307.0,
                1308.0, 1309.0, 1310.0, 1311.0, 1312.0, 1313.0, 1314.0, 1315.0, 1316.0, 1317.0, 1318.0, 1319.0, 1320.0, 1321.0, 1322.0,
                1323.0, 1324.0, 1325.0, 1326.0, 1327.0, 1328.0, 1329.0, 1330.0, 1331.0, 1332.0, 1333.0, 1334.0, 1335.0, 1336.0, 1337.0,
                1338.0, 1339.0, 1340.0, 1341.0, 1342.0, 1343.0, 1344.0, 1345.0, 1346.0, 1347.0, 1348.0, 1349.0, 1350.0, 1351.0, 1352.0,
                1353.0, 1354.0, 1355.0, 1356.0, 1357.0, 1358.0, 1359.0, 1360.0, 1361.0, 1362.0, 1363.0, 1364.0, 1365.0, 1366.0, 1367.0,
                1368.0, 1369.0, 1370.0, 1371.0, 1372.0, 1373.0, 1374.0, 1375.0, 1376.0, 1377.0, 1378.0, 1379.0, 1380.0, 1381.0, 1382.0,
                1383.0, 1384.0, 1385.0, 1386.0, 1387.0, 1388.0, 1389.0, 1390.0, 1391.0, 1392.0, 1393.0, 1394.0, 1395.0, 1396.0, 1397.0,
                1398.0, 1399.0, 1400.0, 1401.0, 1402.0, 1403.0, 1404.0, 1405.0, 1406.0, 1407.0, 1408.0, 1409.0, 1410.0, 1411.0, 1412.0,
                1413.0, 1414.0, 1415.0, 1416.0, 1417.0, 1418.0, 1419.0, 1420.0, 1421.0, 1422.0, 1423.0, 1424.0, 1425.0, 1426.0, 1427.0,
                1428.0, 1429.0, 1430.0, 1431.0, 1432.0, 1433.0, 1434.0, 1435.0, 1436.0, 1437.0, 1438.0, 1439.0, 1440.0, 1441.0, 1442.0,
                1443.0, 1444.0, 1445.0, 1446.0, 1447.0, 1448.0, 1449.0, 1450.0, 1451.0, 1452.0, 1453.0, 1454.0, 1455.0, 1456.0, 1457.0,
                1458.0, 1459.0, 1460.0, 1461.0, 1462.0,
            ],
            axis_id: 0,
        },
        {
            name: "enable_var",
            logged_element: "/alias/enable_var",
            data: [
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            ],
            axis_id: 1,
        },
    ],
    xdata: {
        name: "X-Axis",
        logged_element: "Ideal Time",
        data: [
            0.0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42,
            0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7000000000000001, 0.72, 0.74, 0.76, 0.78, 0.8,
            0.8200000000000001, 0.84, 0.86, 0.88, 0.9, 0.92, 0.9400000000000001, 0.96, 0.98, 1.0, 1.02, 1.04, 1.06, 1.08, 1.1, 1.12,
            1.1400000000000001, 1.16, 1.18, 1.2, 1.22, 1.24, 1.26, 1.28, 1.3, 1.32, 1.34, 1.36, 1.3800000000000001, 1.4000000000000001,
            1.42, 1.44, 1.46, 1.48, 1.5, 1.52, 1.54, 1.56, 1.58, 1.6, 1.62, 1.6400000000000001, 1.6600000000000001, 1.68, 1.7, 1.72, 1.74,
            1.76, 1.78, 1.8, 1.82, 1.84, 1.86, 1.8800000000000001, 1.9000000000000001, 1.92, 1.94, 1.96, 1.98, 2.0, 2.02, 2.04, 2.06, 2.08,
            2.1, 2.12, 2.14, 2.16, 2.18, 2.2, 2.22, 2.24, 2.2600000000000002, 2.2800000000000002, 2.3000000000000003, 2.32, 2.34, 2.36,
            2.38, 2.4, 2.42, 2.44, 2.46, 2.48, 2.5, 2.52, 2.54, 2.56, 2.58, 2.6, 2.62, 2.64, 2.66, 2.68, 2.7, 2.72, 2.74,
            2.7600000000000002, 2.7800000000000002, 2.8000000000000003, 2.82, 2.84, 2.86, 2.88, 2.9, 2.92, 2.94, 2.96, 2.98, 3.0, 3.02,
            3.04, 3.06, 3.08, 3.1, 3.12, 3.14, 3.16, 3.18, 3.2, 3.22, 3.24, 3.2600000000000002, 3.2800000000000002, 3.3000000000000003,
            3.3200000000000003, 3.34, 3.36, 3.38, 3.4, 3.42, 3.44, 3.46, 3.48, 3.5, 3.52, 3.54, 3.56, 3.58, 3.6, 3.62, 3.64, 3.66, 3.68,
            3.7, 3.72, 3.74, 3.7600000000000002, 3.7800000000000002, 3.8000000000000003, 3.8200000000000003, 3.84, 3.86, 3.88, 3.9, 3.92,
            3.94, 3.96, 3.98, 4.0, 4.0200000000000005, 4.04, 4.0600000000000005, 4.08, 4.1, 4.12, 4.14, 4.16, 4.18, 4.2, 4.22, 4.24, 4.26,
            4.28, 4.3, 4.32, 4.34, 4.36, 4.38, 4.4, 4.42, 4.44, 4.46, 4.48, 4.5, 4.5200000000000005, 4.54, 4.5600000000000005, 4.58,
            4.6000000000000005, 4.62, 4.64, 4.66, 4.68, 4.7, 4.72, 4.74, 4.76, 4.78, 4.8, 4.82, 4.84, 4.86, 4.88, 4.9, 4.92, 4.94, 4.96,
            4.98, 5.0, 5.0200000000000005, 5.04, 5.0600000000000005, 5.08, 5.1000000000000005, 5.12, 5.14, 5.16, 5.18, 5.2, 5.22, 5.24,
            5.26, 5.28, 5.3, 5.32, 5.34, 5.36, 5.38, 5.4, 5.42, 5.44, 5.46, 5.48, 5.5, 5.5200000000000005, 5.54, 5.5600000000000005, 5.58,
            5.6000000000000005, 5.62, 5.64, 5.66, 5.68, 5.7, 5.72, 5.74, 5.76, 5.78, 5.8, 5.82, 5.84, 5.86, 5.88, 5.9, 5.92, 5.94, 5.96,
            5.98, 6.0, 6.0200000000000005, 6.04, 6.0600000000000005, 6.08, 6.1000000000000005, 6.12, 6.140000000000001, 6.16, 6.18, 6.2,
            6.22, 6.24, 6.26, 6.28, 6.3, 6.32, 6.34, 6.36, 6.38, 6.4, 6.42, 6.44, 6.46, 6.48, 6.5, 6.5200000000000005, 6.54,
            6.5600000000000005, 6.58, 6.6000000000000005, 6.62, 6.640000000000001, 6.66, 6.68, 6.7, 6.72, 6.74, 6.76, 6.78, 6.8, 6.82, 6.84,
            6.86, 6.88, 6.9, 6.92, 6.94, 6.96, 6.98, 7.0, 7.0200000000000005, 7.04, 7.0600000000000005, 7.08, 7.1000000000000005, 7.12,
            7.140000000000001, 7.16, 7.18, 7.2, 7.22, 7.24, 7.26, 7.28, 7.3, 7.32, 7.34, 7.36, 7.38, 7.4, 7.42, 7.44, 7.46, 7.48, 7.5,
            7.5200000000000005, 7.54, 7.5600000000000005, 7.58, 7.6000000000000005, 7.62, 7.640000000000001, 7.66, 7.68, 7.7, 7.72, 7.74,
            7.76, 7.78, 7.8, 7.82, 7.84, 7.86, 7.88, 7.9, 7.92, 7.94, 7.96, 7.98, 8.0, 8.02, 8.040000000000001, 8.06, 8.08, 8.1,
            8.120000000000001, 8.14, 8.16, 8.18, 8.2, 8.22, 8.24, 8.26, 8.28, 8.3, 8.32, 8.34, 8.36, 8.38, 8.4, 8.42, 8.44, 8.46, 8.48, 8.5,
            8.52, 8.540000000000001, 8.56, 8.58, 8.6, 8.620000000000001, 8.64, 8.66, 8.68, 8.700000000000001, 8.72, 8.74, 8.76, 8.78, 8.8,
            8.82, 8.84, 8.86, 8.88, 8.9, 8.92, 8.94, 8.96, 8.98, 9.0, 9.02, 9.040000000000001, 9.06, 9.08, 9.1, 9.120000000000001, 9.14,
            9.16, 9.18, 9.200000000000001, 9.22, 9.24, 9.26, 9.28, 9.3, 9.32, 9.34, 9.36, 9.38, 9.4, 9.42, 9.44, 9.46, 9.48, 9.5, 9.52,
            9.540000000000001, 9.56, 9.58, 9.6, 9.620000000000001, 9.64, 9.66, 9.68, 9.700000000000001, 9.72, 9.74, 9.76, 9.78, 9.8, 9.82,
            9.84, 9.86, 9.88, 9.9, 9.92, 9.94, 9.96, 9.98, 10.0, 10.02, 10.040000000000001, 10.06, 10.08, 10.1, 10.120000000000001, 10.14,
            10.16, 10.18, 10.200000000000001, 10.22, 10.24, 10.26, 10.28, 10.3, 10.32, 10.34, 10.36, 10.38, 10.4, 10.42, 10.44, 10.46,
            10.48, 10.5, 10.52, 10.540000000000001, 10.56, 10.58, 10.6, 10.620000000000001, 10.64, 10.66, 10.68, 10.700000000000001, 10.72,
            10.74, 10.76, 10.78, 10.8, 10.82, 10.84, 10.86, 10.88, 10.9, 10.92, 10.94, 10.96, 10.98, 11.0, 11.02, 11.040000000000001, 11.06,
            11.08, 11.1, 11.120000000000001, 11.14, 11.16, 11.18, 11.200000000000001, 11.22, 11.24, 11.26, 11.28, 11.3, 11.32, 11.34, 11.36,
            11.38, 11.4, 11.42, 11.44, 11.46, 11.48, 11.5, 11.52, 11.540000000000001, 11.56, 11.58, 11.6, 11.620000000000001, 11.64, 11.66,
            11.68, 11.700000000000001, 11.72, 11.74, 11.76, 11.78, 11.8, 11.82, 11.84, 11.86, 11.88, 11.9, 11.92, 11.94, 11.96, 11.98, 12.0,
            12.02, 12.040000000000001, 12.06, 12.08, 12.1, 12.120000000000001, 12.14, 12.16, 12.18, 12.200000000000001, 12.22, 12.24, 12.26,
            12.280000000000001, 12.3, 12.32, 12.34, 12.36, 12.38, 12.4, 12.42, 12.44, 12.46, 12.48, 12.5, 12.52, 12.540000000000001, 12.56,
            12.58, 12.6, 12.620000000000001, 12.64, 12.66, 12.68, 12.700000000000001, 12.72, 12.74, 12.76, 12.780000000000001, 12.8, 12.82,
            12.84, 12.86, 12.88, 12.9, 12.92, 12.94, 12.96, 12.98, 13.0, 13.02, 13.040000000000001, 13.06, 13.08, 13.1, 13.120000000000001,
            13.14, 13.16, 13.18, 13.200000000000001, 13.22, 13.24, 13.26, 13.280000000000001, 13.3, 13.32, 13.34, 13.36, 13.38, 13.4, 13.42,
            13.44, 13.46, 13.48, 13.5, 13.52, 13.540000000000001, 13.56, 13.58, 13.6, 13.620000000000001, 13.64, 13.66, 13.68,
            13.700000000000001, 13.72, 13.74, 13.76, 13.780000000000001, 13.8, 13.82, 13.84, 13.86, 13.88, 13.9, 13.92, 13.94, 13.96, 13.98,
            14.0, 14.02, 14.040000000000001, 14.06, 14.08, 14.1, 14.120000000000001, 14.14, 14.16, 14.18, 14.200000000000001, 14.22, 14.24,
            14.26, 14.280000000000001, 14.3, 14.32, 14.34, 14.36, 14.38, 14.4, 14.42, 14.44, 14.46, 14.48, 14.5, 14.52, 14.540000000000001,
            14.56, 14.58, 14.6, 14.620000000000001, 14.64, 14.66, 14.68, 14.700000000000001, 14.72, 14.74, 14.76, 14.780000000000001, 14.8,
            14.82, 14.84, 14.86, 14.88, 14.9, 14.92, 14.94, 14.96, 14.98, 15.0, 15.02, 15.040000000000001, 15.06, 15.08, 15.1,
            15.120000000000001, 15.14, 15.16, 15.18, 15.200000000000001, 15.22, 15.24, 15.26, 15.280000000000001, 15.3, 15.32, 15.34, 15.36,
            15.38, 15.4, 15.42, 15.44, 15.46, 15.48, 15.5, 15.52, 15.540000000000001, 15.56, 15.58, 15.6, 15.620000000000001, 15.64, 15.66,
            15.68, 15.700000000000001, 15.72, 15.74, 15.76, 15.780000000000001, 15.8, 15.82, 15.84, 15.860000000000001, 15.88, 15.9, 15.92,
            15.94, 15.96, 15.98, 16.0, 16.02, 16.04, 16.06, 16.080000000000002, 16.1, 16.12, 16.14, 16.16, 16.18, 16.2, 16.22,
            16.240000000000002, 16.26, 16.28, 16.3, 16.32, 16.34, 16.36, 16.38, 16.4, 16.42, 16.44, 16.46, 16.48, 16.5, 16.52, 16.54, 16.56,
            16.580000000000002, 16.6, 16.62, 16.64, 16.66, 16.68, 16.7, 16.72, 16.740000000000002, 16.76, 16.78, 16.8, 16.82, 16.84, 16.86,
            16.88, 16.9, 16.92, 16.94, 16.96, 16.98, 17.0, 17.02, 17.04, 17.06, 17.080000000000002, 17.1, 17.12, 17.14, 17.16, 17.18, 17.2,
            17.22, 17.240000000000002, 17.26, 17.28, 17.3, 17.32, 17.34, 17.36, 17.38, 17.400000000000002, 17.42, 17.44, 17.46, 17.48, 17.5,
            17.52, 17.54, 17.56, 17.580000000000002, 17.6, 17.62, 17.64, 17.66, 17.68, 17.7, 17.72, 17.740000000000002, 17.76, 17.78, 17.8,
            17.82, 17.84, 17.86, 17.88, 17.900000000000002, 17.92, 17.94, 17.96, 17.98, 18.0, 18.02, 18.04, 18.06, 18.080000000000002, 18.1,
            18.12, 18.14, 18.16, 18.18, 18.2, 18.22, 18.240000000000002, 18.26, 18.28, 18.3, 18.32, 18.34, 18.36, 18.38, 18.400000000000002,
            18.42, 18.44, 18.46, 18.48, 18.5, 18.52, 18.54, 18.56, 18.580000000000002, 18.6, 18.62, 18.64, 18.66, 18.68, 18.7, 18.72,
            18.740000000000002, 18.76, 18.78, 18.8, 18.82, 18.84, 18.86, 18.88, 18.900000000000002, 18.92, 18.94, 18.96, 18.98, 19.0, 19.02,
            19.04, 19.06, 19.080000000000002, 19.1, 19.12, 19.14, 19.16, 19.18, 19.2, 19.22, 19.240000000000002, 19.26, 19.28, 19.3, 19.32,
            19.34, 19.36, 19.38, 19.400000000000002, 19.42, 19.44, 19.46, 19.48, 19.5, 19.52, 19.54, 19.56, 19.580000000000002, 19.6, 19.62,
            19.64, 19.66, 19.68, 19.7, 19.72, 19.740000000000002, 19.76, 19.78, 19.8, 19.82, 19.84, 19.86, 19.88, 19.900000000000002, 19.92,
            19.94, 19.96, 19.98, 20.0, 20.02, 20.04, 20.06, 20.080000000000002, 20.1, 20.12, 20.14, 20.16, 20.18, 20.2, 20.22,
            20.240000000000002, 20.26, 20.28, 20.3, 20.32, 20.34, 20.36, 20.38, 20.400000000000002, 20.42, 20.44, 20.46, 20.48, 20.5, 20.52,
            20.54, 20.56, 20.580000000000002, 20.6, 20.62, 20.64, 20.66, 20.68, 20.7, 20.72, 20.740000000000002, 20.76, 20.78, 20.8, 20.82,
            20.84, 20.86, 20.88, 20.900000000000002, 20.92, 20.94, 20.96, 20.98, 21.0, 21.02, 21.04, 21.06, 21.080000000000002, 21.1, 21.12,
            21.14, 21.16, 21.18, 21.2, 21.22, 21.240000000000002, 21.26, 21.28, 21.3, 21.32, 21.34, 21.36, 21.38, 21.400000000000002, 21.42,
            21.44, 21.46, 21.48, 21.5, 21.52, 21.54, 21.56, 21.580000000000002, 21.6, 21.62, 21.64, 21.66, 21.68, 21.7, 21.72,
            21.740000000000002, 21.76, 21.78, 21.8, 21.82, 21.84, 21.86, 21.88, 21.900000000000002, 21.92, 21.94, 21.96, 21.98, 22.0, 22.02,
            22.04, 22.06, 22.080000000000002, 22.1, 22.12, 22.14, 22.16, 22.18, 22.2, 22.22, 22.240000000000002, 22.26, 22.28, 22.3, 22.32,
            22.34, 22.36, 22.38, 22.400000000000002, 22.42, 22.44, 22.46, 22.48, 22.5, 22.52, 22.54, 22.56, 22.580000000000002, 22.6, 22.62,
            22.64, 22.66, 22.68, 22.7, 22.72, 22.740000000000002, 22.76, 22.78, 22.8, 22.82, 22.84, 22.86, 22.88, 22.900000000000002, 22.92,
            22.94, 22.96, 22.98, 23.0, 23.02, 23.04, 23.06, 23.080000000000002, 23.1, 23.12, 23.14, 23.16, 23.18, 23.2, 23.22,
            23.240000000000002, 23.26, 23.28, 23.3, 23.32, 23.34, 23.36, 23.38, 23.400000000000002, 23.42, 23.44, 23.46, 23.48, 23.5, 23.52,
            23.54, 23.56, 23.580000000000002, 23.6, 23.62, 23.64, 23.66, 23.68, 23.7, 23.72, 23.740000000000002, 23.76, 23.78, 23.8, 23.82,
            23.84, 23.86, 23.88, 23.900000000000002, 23.92, 23.94, 23.96, 23.98, 24.0, 24.02, 24.04, 24.060000000000002, 24.080000000000002,
            24.1, 24.12, 24.14, 24.16, 24.18, 24.2, 24.22, 24.240000000000002, 24.26, 24.28, 24.3, 24.32, 24.34, 24.36, 24.38,
            24.400000000000002, 24.42, 24.44, 24.46, 24.48, 24.5, 24.52, 24.54, 24.560000000000002, 24.580000000000002, 24.6, 24.62, 24.64,
            24.66, 24.68, 24.7, 24.72, 24.740000000000002, 24.76, 24.78, 24.8, 24.82, 24.84, 24.86, 24.88, 24.900000000000002, 24.92, 24.94,
            24.96, 24.98, 25.0, 25.02, 25.04, 25.060000000000002, 25.080000000000002, 25.1, 25.12, 25.14, 25.16, 25.18, 25.2, 25.22,
            25.240000000000002, 25.26, 25.28, 25.3, 25.32, 25.34, 25.36, 25.38, 25.400000000000002, 25.42, 25.44, 25.46, 25.48, 25.5, 25.52,
            25.54, 25.560000000000002, 25.580000000000002, 25.6, 25.62, 25.64, 25.66, 25.68, 25.7, 25.72, 25.740000000000002, 25.76, 25.78,
            25.8, 25.82, 25.84, 25.86, 25.88, 25.900000000000002, 25.92, 25.94, 25.96, 25.98, 26.0, 26.02, 26.04, 26.060000000000002,
            26.080000000000002, 26.1, 26.12, 26.14, 26.16, 26.18, 26.2, 26.22, 26.240000000000002, 26.26, 26.28, 26.3, 26.32, 26.34, 26.36,
            26.38, 26.400000000000002, 26.42, 26.44, 26.46, 26.48, 26.5, 26.52, 26.54, 26.560000000000002, 26.580000000000002, 26.6, 26.62,
            26.64, 26.66, 26.68, 26.7, 26.72, 26.740000000000002, 26.76, 26.78, 26.8, 26.82, 26.84, 26.86, 26.88, 26.900000000000002, 26.92,
            26.94, 26.96, 26.98, 27.0, 27.02, 27.04, 27.060000000000002, 27.080000000000002, 27.1, 27.12, 27.14, 27.16, 27.18, 27.2, 27.22,
            27.240000000000002, 27.26, 27.28,
        ],
    },
    yaxis: [
        { name: "Axis 1", id: 0 },
        { name: "Axis 2", id: 1 },
    ],
}

const CLASS_AXIS_ROW = "axis"
const CLASS_INPUT_ERROR = "input-error"
const CLASS_ERROR_MSG = "error-msg"

const MIN_DECIMATION = 1
const MAX_DECIMATION = 0xffff
const MIN_PROBE_LOCATION = 0
const MAX_PROBE_LOCATION = 100
const MIN_TIMEOUT_SEC = 0
const MAX_TIMEOUT_SEC = 420 // 2^32/1e7 = 429.49;  Make it round to 7 minutes
const MIN_HOLD_TIME_MS = 0
const MAX_HOLD_TIME_MS = 420 * 1000

const DEFAULT_LINE_WIDTH = 1
const DEFAULT_TICKS_COLOR = "#666666"

const FOCUSED_LINE_WIDTH = 3
const FOCUSED_TICKS_COLOR = "#000000"

const NB_OPERANDS_MAP: Record<API.Datalogging.TriggerType, number> = {
    true: 0,
    eq: 2,
    neq: 2,
    lt: 2,
    let: 2,
    gt: 2,
    get: 2,
    cmt: 2,
    within: 3,
}

$.extend($.fn, scrutiny_treetable)
$.extend($.fn, scrutiny_resizable_table)
$.extend($.fn, { scrutiny_multiselect: multiselect.scrutiny_multiselect })

$.extend($.fn, {
    enable: function (this: JQuery): JQuery {
        return this.removeAttr("disabled")
    },
    disable: function (this: JQuery): JQuery {
        return this.attr("disabled", "disabled")
    },
})

Chart.register(RemoveUnusedAxesPlugin)
Chart.register(DrawTriggerPlugin)
Chart.register(zoomPlugin)

type JQueryTable = JQuery<HTMLTableElement>
type JQueryRow = JQuery<HTMLTableRowElement>

interface ScrutinyResizableTable extends JQuery<HTMLTableElement> {
    scrutiny_resizable_table: Function
}
interface ScrutinyTreeTable extends ScrutinyResizableTable {
    scrutiny_treetable: Function
}

interface JQueryDisableable<T> extends JQuery<T> {
    enable: Function
    disable: Function
}

interface SignalTableConfig {
    yaxis: API.Datalogging.AxisDef[]
    signals: {
        row: JQueryRow
        axis_id: number
    }[]
}

export class GraphWidget extends BaseWidget {
    container: JQuery
    /** The Scrutiny App instance */
    app: App
    /** The instance ID of this widget. */
    instance_id: number
    /** Logger element */
    logger: logging.Logger
    /** incrementing number to uniquely identify axes row in the signal list table.*/
    next_axis_id: number

    /* Tells wether we are waiting on an acquisition to complete or not. Sets to true after the user clicks "Acquire"*/
    waiting_on_acquisition: boolean
    /* Token given by the server to identify the acquisition request */
    pending_acquisition_token: string | null = null
    /* Some acquisition are expected to fails. This list contains them so we silently ignore their failure.  
    Happens when we interrupt a previous acquisition */
    expected_failure_token: Set<string>

    // Some layout variable referencing important UI elements that we often modify
    layout_content_div: JQuery<HTMLDivElement>
    graph_config_div: JQuery<HTMLDivElement>
    graph_display_div: JQuery<HTMLDivElement>
    zoom_buttons_block: JQuery<HTMLDivElement>
    legend_zone: JQuery<HTMLDivElement>
    graph_zone: JQuery<HTMLDivElement>
    graph_broswer_div: JQuery<HTMLDivElement>
    estimated_duration_field_div: JQuery<HTMLDivElement>
    button_configure: JQueryDisableable<HTMLButtonElement>
    button_acquire: JQueryDisableable<HTMLButtonElement>
    button_browse: JQueryDisableable<HTMLButtonElement>
    button_graph: JQueryDisableable<HTMLButtonElement>

    /* Actual active tab. Configure, Browse, Graph */
    active_tab: ActiveTab
    /* List of dataset selected by the user by clicking them in the legend. */
    selected_datasets: Set<number> // Graph datasets that are selected with click
    /* The Chart object from Chart.js */
    chart: Chart | null
    /* The active zoom direction */
    zoom_dir: ZoomDir

    /**
     *
     * @param container HTML container object in which to append the widget content
     * @param app The Scrutiny App instance
     * @param instance_id A unique instance number for this widget
     */
    constructor(container: JQuery<HTMLDivElement>, app: App, instance_id: number) {
        super(container, app, instance_id)
        this.container = container
        this.app = app
        this.instance_id = instance_id

        this.logger = logging.getLogger(this.constructor.name)
        this.next_axis_id = 1
        this.layout_content_div = null as unknown as JQuery<HTMLDivElement>
        this.graph_config_div = null as unknown as JQuery<HTMLDivElement>
        this.graph_display_div = null as unknown as JQuery<HTMLDivElement>
        this.zoom_buttons_block = null as unknown as JQuery<HTMLDivElement>
        this.legend_zone = null as unknown as JQuery<HTMLDivElement>
        this.graph_zone = null as unknown as JQuery<HTMLDivElement>
        this.graph_broswer_div = null as unknown as JQuery<HTMLDivElement>
        this.button_configure = null as unknown as JQueryDisableable<HTMLButtonElement>
        this.button_acquire = null as unknown as JQueryDisableable<HTMLButtonElement>
        this.button_browse = null as unknown as JQueryDisableable<HTMLButtonElement>
        this.button_graph = null as unknown as JQueryDisableable<HTMLButtonElement>
        this.estimated_duration_field_div = null as unknown as JQuery<HTMLDivElement>
        this.chart = null
        this.selected_datasets = new Set()

        this.waiting_on_acquisition = false
        this.pending_acquisition_token = null
        this.expected_failure_token = new Set()
        this.active_tab = "configure"
        this.zoom_dir = "xy"
    }

    /**
     * Initialize the widget
     */
    initialize() {
        const that = this
        // Let's start by building the HTML structure based on our templates
        const layout = this.app.get_template(this, "layout") as JQuery<HTMLDivElement>
        this.layout_content_div = layout.find(".layout-content") as JQueryDisableable<HTMLDivElement>
        this.button_configure = layout.find("button.btn-configure").first() as JQueryDisableable<HTMLButtonElement>
        this.button_acquire = layout.find("button.btn-acquire").first() as JQueryDisableable<HTMLButtonElement>
        this.button_browse = layout.find("button.btn-browse").first() as JQueryDisableable<HTMLButtonElement>
        this.button_graph = layout.find("button.btn-graph").first() as JQueryDisableable<HTMLButtonElement>
        this.graph_config_div = layout.find(".graph-config") as JQuery<HTMLDivElement>
        this.graph_display_div = layout.find(".graph-display") as JQuery<HTMLDivElement>
        this.zoom_buttons_block = layout.find(".graph-zoom-buttons") as JQuery<HTMLDivElement>
        this.legend_zone = this.graph_display_div.find(".legend_zone") as JQuery<HTMLDivElement>
        this.graph_zone = this.graph_display_div.find(".graph_zone") as JQuery<HTMLDivElement>
        this.graph_broswer_div = layout.find(".graph-browser") as JQuery<HTMLDivElement>
        this.estimated_duration_field_div = layout.find(".status-bar .estimated_duration") as JQuery<HTMLDivElement>
        const config_form_pane = this.app.get_template(this, "config_form_pane") as JQuery<HTMLDivElement>
        const signal_list_pane = this.app.get_template(this, "signal_list_pane") as JQuery<HTMLDivElement>
        this.graph_config_div.find(".pane-left").append(signal_list_pane)
        this.graph_config_div.find(".pane-right").append(config_form_pane)
        this.container.append(layout)

        const config_table = this.get_config_table()

        /**
         * Some configurations row are using the custom ObjTextbox plugin to display dran n' dropped element.
         * For instance X-Axis as signal or trigger operands.
         */
        config_table.find(".graph-operand-objtextbox").each(function (el) {
            const element = $(this) as JQueryObjTextbox
            WatchableTextbox.make(element, that.app.datastore)
        })

        WatchableTextbox.make(this.get_xaxis_watchable_input(), this.app.datastore, true)

        // Read the datalogging capabilities from the server module and update UI accordingly
        // (Put some element N/A if disconnected, basically)
        this.update_config_capabilities()

        // Server module throws that event when the datalogging
        this.app.on_event("scrutiny.datalogging_capabilities_changed", function () {
            that.update_config_capabilities()
        })

        // Attach the config_change callback on each event that tells that the configuration ahs changed.
        // Will basically display error messages if any valud is wrong
        this.get_xaxis_watchable_input().on("change", function () {
            that.config_changed()
        })

        this.get_operand1_input().on("change", function () {
            that.config_changed()
        })

        this.get_operand2_input().on("change", function () {
            that.config_changed()
        })

        this.get_operand3_input().on("change", function () {
            that.config_changed()
        })

        config_table.find("select").on("change", function () {
            that.config_changed()
        })

        config_table.find("input").on("change", function () {
            that.config_changed()
        })

        config_table.find("input").on("blur", function () {
            that.config_changed()
        })

        this.get_decimation_input().on("change", function () {
            force_input_int($(this), MIN_DECIMATION, MAX_DECIMATION)
            that.config_changed()
        })

        this.get_probe_location_input().on("change", function () {
            force_input_int($(this), MIN_PROBE_LOCATION, MAX_PROBE_LOCATION)
            that.config_changed()
        })

        this.get_timeout_input().on("change", function () {
            force_input_float($(this), MIN_TIMEOUT_SEC, MAX_TIMEOUT_SEC)
            that.config_changed()
        })

        this.get_hold_time_input().on("change", function () {
            force_input_float($(this), MIN_HOLD_TIME_MS, MAX_HOLD_TIME_MS)
            that.config_changed()
        })

        // Show help tooltip
        configure_all_tooltips(config_table)

        // Split pane between graph and legend
        Split([this.graph_config_div.find(".pane-left")[0], this.graph_config_div.find(".pane-right")[0]], {
            minSize: 100,
            gutterSize: 6,
            snapOffset: 0,
        })

        // Split pane between configuration and list of signals
        Split([this.graph_zone[0], this.legend_zone[0]], {
            minSize: 100,
            gutterSize: 6,
            snapOffset: 0,
            sizes: [80, 20],
        })

        // Let's configure the custom treetable component so that we can drop signals and add axes
        const signal_list_table = signal_list_pane.find("table.signal-list") as ScrutinyTreeTable
        signal_list_table.attr("id", "graph-signal-list-" + this.instance_id)

        const tree_table_config: TreeTableOptions = {
            draggable: true, // Elements can be dragged from the signal list
            droppable: true, // Elements can be dropped in the signal list
            allow_delete: true, // Elements can be deleted
            // Rule to tell move an item: Element must be a signal (not an axis, that are root nodes with no parent.)
            move_allowed_fn: function (tr: JQueryRow, node_id: string, new_parent_id: string | null, after_node_id: string | null) {
                if (new_parent_id == null) {
                    // Do not allow to move to a root node (axis are root nodes.)
                    return false
                }
                return true
            },
            col_index: 1, // The cell index (left ot right) in which to put the tree button. 1 base indexing
            transfer_policy_fn: function (
                source_table: JQueryTable,
                dest_table: JQueryTable,
                tr: JQuery,
                new_parent_id: string | null,
                after_node_id: string | null
            ): TransferPolicy {
                // This function tells what to do if someone wants to transfer items from another table to this signal list table
                if (new_parent_id == null) {
                    // Root node are reserved to axis
                    return { scope: TransferScope.NONE }
                }

                // Allow to transfer a row that contains a watchable
                if (WatchableTableInterface.is_entry_row(tr as JQueryRow)) {
                    return { scope: TransferScope.ROW_ONLY }
                }

                // anything else cannot be transfered (dropped)
                return { scope: TransferScope.NONE }
            },
            // By default, empty table
            load_fn: function (node_id, tr) {
                return []
            },

            transfer_fn: function (
                source_table: JQueryTable,
                bare_line: JQueryRow,
                meta: TransferFunctionMetadata
            ): TransferFunctionOutput {
                // Function that does the element transfer
                try {
                    const text_name = WatchableTableInterface.get_name_cell(bare_line).text()
                    const entry = WatchableTableInterface.get_entry_from_row(that.app.datastore, bare_line)
                    if (entry === null) {
                        that.logger.error("Failed to transfer row. Entry not found in " + bare_line)
                        return null
                    }

                    const row_desc = WatchableTableInterface.make_entry_row(entry, text_name, false, false)
                    row_desc.td_name.live_edit()
                    return { tr: row_desc.tr } // REturn the element to be added to the signal list table
                } catch (e) {
                    that.logger.error("Failed to transfer row. Entry not found in " + bare_line)
                    return null
                }
            },
            keydown_callback: function (e: JQuery.KeyDownEvent, selected_rows: JQueryRow) {
                const first_row = selected_rows.first()
                if (e.key == "F2") {
                    if (selected_rows.length > 1) {
                        signal_list_table.scrutiny_treetable("select_node", first_row)
                    }

                    let td: JQueryLiveEdit<HTMLTableCellElement> | null = null

                    if (WatchableTableInterface.is_entry_row(selected_rows)) {
                        td = WatchableTableInterface.get_name_cell(first_row)
                    } else if (first_row.hasClass(CLASS_AXIS_ROW)) {
                        td = first_row.children("td:first") as JQueryLiveEdit<HTMLTableCellElement>
                    }
                    if (td !== null) {
                        if (td.live_edit("is_label_mode")) {
                            td.live_edit("edit_mode")
                        }
                    }
                }
            },
        }

        signal_list_table.scrutiny_treetable(tree_table_config)

        signal_list_table.on("stt.transfer-complete", function (e, data: TransferCompleteEventData) {
            // Called when dropped on table
            that.config_changed()
        })

        signal_list_table.on("stt.node-deleted", function () {
            that.config_changed()
        })

        signal_list_pane.find(".btn-add-axis").on("click", function () {
            that.add_axis()
        })

        this.add_axis()
        this.switch_to_config()

        this.button_configure.on("click", function () {
            that.switch_to_config()
        })

        this.button_graph.on("click", function () {
            that.switch_to_graph()
        })

        this.button_browse.on("click", function () {
            that.switch_to_browser()
        })

        this.button_acquire.on("click", function () {
            const req = that.validate_config_and_make_request() // Mark the bad configs on the UI
            if (req !== null) {
                if (that.waiting_on_acquisition && that.pending_acquisition_token !== null) {
                    // Since we purposely push a new request before the previous was completed,
                    //we expect the server to broadcast a failure message for that token
                    that.expected_failure_token.add(that.pending_acquisition_token)
                }

                that.waiting_on_acquisition = true
                that.pending_acquisition_token = null
                that.logger.debug("Requesting datalogging acquisition")
                that.app.server_conn.chain_request("request_datalogging_acquisition", req).then(
                    function (data: API.Message.S2C.RequestDataloggingAcquisition) {
                        if (that.waiting_on_acquisition) {
                            that.logger.debug(`Received acquisition request acknowledgement with token ${data.request_token}`)
                            that.pending_acquisition_token = data.request_token
                            that.clear_graph() // Remove any previous graph as we're waiting on a new one.
                        } else {
                            that.stop_waiting_for_acquisition()
                            that.logger.error("Received a datalogging acquisition confirmation but none was expected")
                        }
                    },
                    function (data?: API.Message.S2C.Error) {
                        let msg = ""
                        if (typeof data !== "undefined") {
                            msg = data.msg
                        }
                        that.logger.error("Failed to request datalogging acquisition. " + msg)
                        that.stop_waiting_for_acquisition()
                    }
                )
                that.switch_to_graph()
            } else {
                that.switch_to_config()
            }
        })

        this.zoom_buttons_block.find(".btn-zoom-x").on("click", function () {
            that.set_zoom_dir("x")
        })
        this.zoom_buttons_block.find(".btn-zoom-y").on("click", function () {
            that.set_zoom_dir("y")
        })
        this.zoom_buttons_block.find(".btn-zoom-xy").on("click", function () {
            that.set_zoom_dir("xy")
        })
        this.zoom_buttons_block.find(".btn-zoom-reset").on("click", function () {
            if (that.chart !== null) {
                that.chart.resetZoom()
            }
        })

        this.set_zoom_dir("xy")

        // Register a callback for when the server tells that an acquisition is complete.
        // Action is to request for its data and show it to the user.
        this.app.server_conn.register_api_callback(
            "inform_datalogging_acquisition_complete",
            function (data: API.Message.S2C.InformDataloggingAcquisitionComplete) {
                if (!that.waiting_on_acquisition) {
                    that.logger.debug("Acquisition completed, but was not waiting for it")
                    that.stop_waiting_for_acquisition()
                    return
                }

                if (that.pending_acquisition_token == null) {
                    that.logger.error("Received a confirmation of datalogging completion, but no request token was being waited for")
                    that.stop_waiting_for_acquisition()
                    return
                }

                if (that.pending_acquisition_token != data.request_token) {
                    if (data.success == false && that.expected_failure_token.has(data.request_token)) {
                        // Expected failure when ask for a new acquisition while one is already pending.
                        // The server will cancel the previous one before starting the new one
                        that.logger.debug(`Previous request canceled by the server. Token=${data.request_token}`)
                        that.expected_failure_token.delete(data.request_token)
                    } else {
                        that.logger.warning(`Acquisition completed, but was not mine. Token=${data.request_token}`)
                        that.stop_waiting_for_acquisition()
                    }
                    return
                }

                if (data.success) {
                    if (data.reference_id !== null) {
                        that.logger.debug(
                            `Datalogging acquisition complete. Request token=${data.request_token}). Acquisition reference ID=${data.reference_id}`
                        )
                        // Sends a request to the server for downloading the acquisition that just completed.
                        that.request_load_acquisition_data(data.reference_id)
                    } else {
                        that.logger.error("Server did not provide a reference id for datalogging acquisition")
                    }
                } else {
                    that.graph_display_div.find("p.error_msg").text("Did not complete : " + data.detail_msg)
                }

                that.stop_waiting_for_acquisition()
            }
        )

        this.app.server_conn.register_api_callback(
            "read_datalogging_acquisition_content_response",
            function (data: API.Message.S2C.ReadDataloggingAcquisitionContent) {
                that.stop_waiting_for_acquisition()
                that.show_acquisition_data(data)
            }
        )

        this.clear_graph()

        // debug only
        setTimeout(function () {
            that.show_acquisition_data(payload)
        }, 0)
    }

    set_zoom_dir(dir: ZoomDir) {
        this.zoom_buttons_block.find("button").removeClass("selected")
        this.zoom_buttons_block.find(`button.btn-zoom-${dir}`).addClass("selected")
        this.zoom_dir = dir

        if (this.chart !== null) {
            set_nested(this.chart.options, ["plugins", "zoom", "zoom", "mode"], dir)
        }
    }

    /**
     * Change the internal state of the graph widget so that it does not wait on an acquisition from the server
     */
    stop_waiting_for_acquisition(): void {
        this.waiting_on_acquisition = false
        this.pending_acquisition_token = null
    }

    /**
     * Switch the widget pane to "Graph"
     */
    switch_to_graph() {
        this.graph_config_div.hide()
        this.graph_display_div.show()
        this.zoom_buttons_block.show()
        this.graph_broswer_div.hide()

        this.button_configure.enable()
        this.button_browse.enable()
        this.button_graph.disable()
        this.estimated_duration_field_div.hide() // This field is floating. May conflict with canvas

        this.active_tab = "graph"
    }

    /**
     * Switch the widget pane to "Configuration"
     */
    switch_to_config() {
        this.graph_config_div.show()
        this.graph_display_div.hide()
        this.zoom_buttons_block.hide()
        this.graph_broswer_div.hide()

        this.button_configure.disable()
        this.button_browse.enable()
        this.button_graph.enable()

        this.estimated_duration_field_div.show() // This field is floating. May conflict with canvas

        this.active_tab = "configure"
    }

    /**
     * Switch the widget pane to "Browser"
     */
    switch_to_browser() {
        this.graph_config_div.hide()
        this.zoom_buttons_block.hide()
        this.graph_display_div.hide()
        this.graph_broswer_div.show()

        this.button_configure.enable()
        this.button_browse.disable()
        this.button_graph.enable()

        this.estimated_duration_field_div.hide() // This field is floating. May conflict with canvas

        this.active_tab = "browse"
    }

    /**
     * Reads the content of an acquisition from the server. A callback on the response will display the graph right away
     * @param reference_id The acquisition reference ID given by the server when listing the acquisitions
     */
    request_load_acquisition_data(reference_id: string) {
        const req: Partial<API.Message.C2S.ReadDataloggingAcquisitionContent> = {
            reference_id: reference_id,
        }
        this.app.server_conn.send_request("read_datalogging_acquisition_content", req)
    }

    /**
     * Delete the graph from the UI
     */
    clear_graph() {
        this.graph_zone.html("<p>No graph to display yet...</p> <p class='error_msg'></p>")
        this.legend_zone.html("")
        this.selected_datasets.clear()
        if (this.chart !== null) {
            this.chart.clear()
            this.chart = null
        }
    }

    /**
     * Get the chart scales options based on a dataset index. Simple helper to make code cleaner
     * @param dataset_index The dataset index
     * @returns The scale options or null if not accessible
     */
    get_dataset_scale_options(dataset_index: number): any {
        if (this.chart === null) {
            throw "No chart available"
        }
        const meta = this.chart.getDatasetMeta(dataset_index)
        if (typeof meta === "undefined" || meta === null) {
            throw "No metadata for dataset " + dataset_index
        }
        if (typeof meta.yAxisID === "undefined" || meta.yAxisID === null) {
            throw "No axis ID for dataset " + dataset_index
        }
        if (typeof this.chart.options.scales === "undefined") {
            this.chart.options.scales = {}
        }
        let scale_options = this.chart.options.scales[meta.yAxisID]
        if (typeof scale_options === "undefined" || scale_options === null) {
            throw "No scales set for yAxisID = " + meta.yAxisID
        }

        return scale_options
    }

    /**
     * Makes a row for the legend that let the user control the display of the trigger.
     * Not tied to any dataset. Interracts with a custom plugin designed to show a dotted line on the trigger
     */
    make_legend_trigger_row() {
        const that = this
        const trigger_row = $("<tr class='trigger_row'></tr>") as JQueryRow
        const colorbox_td = $("<td class='colorbox_td'></td>")
        const trigger_text_cell = $("<td colspan='2'>Trigger</td>")
        const colorbox = $("<span class='legend_color_box'></span>")
        colorbox.css("background", "white")
        colorbox.css("border-color", "black")
        trigger_row.append(colorbox_td.append(colorbox)).append(trigger_text_cell)

        const update_trigger_row = function () {
            // Function that adjust the display styled based on the display status of the trigger line
            if (that.chart == null) {
                return
            }
            //@ts-ignore
            if (!that.chart.options.plugins[DrawTriggerPlugin.id].enabled) {
                trigger_text_cell.css("text-decoration", "line-through")
            } else {
                trigger_text_cell.css("text-decoration", "")
            }
        }

        update_trigger_row()

        colorbox.on("click", function (e: JQuery.ClickEvent) {
            if (that.chart == null) {
                return
            }
            //@ts-ignore
            that.chart.options.plugins[DrawTriggerPlugin.id].enabled = !that.chart.options.plugins[DrawTriggerPlugin.id].enabled
            update_trigger_row()
            that.chart.update()
        })

        return trigger_row
    }

    /**
     * Generates a X or Y axis row that will be shown in the legend.  Trigger is a special case
     * Each rows has 3 cell. Colorbox, title, value
     */
    make_legend_row(item: LegendItem | null, text: string, is_xaxis: boolean = false): JQuery<HTMLTableRowElement> {
        const that = this
        if (this.chart == null) {
            throw "No chart to make legend for"
        }
        let dataset_index: number | null = null
        if (item !== null) {
            dataset_index = item.datasetIndex ?? null
        }
        const colorbox_td = $("<td class='colorbox_td'></td>")
        const text_td = $("<td class='text_td'></td>")
        const val_td = $("<td class='val_td'></td>")
        const tr = $("<tr></tr>") as JQuery<HTMLTableRowElement>
        tr.append(colorbox_td).append(text_td).append(val_td)

        if (is_xaxis) {
            tr.addClass("xaxis") // Used to exclude this row from the multiselect (user can't select x-axis)
        }

        // Color box
        if (item !== null && dataset_index !== null) {
            tr.attr("dataset-index", dataset_index)
            const colorbox = $("<span class='legend_color_box'></span>")
            if (typeof item.fillStyle == "string") {
                colorbox.css("background", item.fillStyle)
            }
            if (typeof item.strokeStyle == "string") {
                colorbox.css("border-color", item.strokeStyle)
            }

            // Toggle visibility of element on click.  A custom plugin will hide the scale if necessary
            colorbox.on("click", function (e: JQuery.ClickEvent) {
                if (that.chart == null) {
                    return
                }
                if (dataset_index !== null) {
                    that.chart.setDatasetVisibility(dataset_index, !that.chart.isDatasetVisible(dataset_index))
                    that.chart.update()

                    if (!that.chart.isDatasetVisible(dataset_index)) {
                        text_td.css("text-decoration", "line-through")
                    } else {
                        text_td.css("text-decoration", "initial")
                    }
                    e.stopPropagation() // Will prevent to select the row that we disable
                }
            })
            colorbox_td.append(colorbox)
        }

        // Text
        const ptext = $("<p class='legend_text'></p>")
        if (item !== null && item.hidden) {
            ptext.addClass("line_hidden")
        }
        ptext.text(text + ":")
        text_td.append(ptext)

        // value
        const pval = $("<p class='legend_val'></p>")
        val_td.append(pval)
        tr.append(val_td)

        return tr
    }

    /**
     * Generates a legend to show in the split pane based on the data in the Chart object
     */
    build_legend(): void {
        if (this.chart === null) {
            return
        }
        const that = this
        this.legend_zone.html("")
        // Custom plugin to do multiselect on items that are not forms multiselect objects.
        const multiselect_container = $("<div class='multiselect-container'></div>")
        const legend_table = $("<table class='legend'><thead></thead></table>")
        const tbody = $("<tbody></tbody>")
        this.legend_zone.append(multiselect_container)
        multiselect_container.append(legend_table)
        legend_table.append(tbody)
        // @ts-ignore
        const xaxis_title = this.chart.scales["x"].options?.title?.text || "x-axis"

        legend_table.append(this.make_legend_row(null, xaxis_title, true))
        // Following Chart.js doc, we are reusing an internal function to generate the labels
        // @ts-ignore
        const items = this.chart.options.plugins.legend.labels.generateLabels(this.chart)
        for (let i = 0; i < items.length; i++) {
            legend_table.append(this.make_legend_row(items[i], items[i].text, false))
        }
        legend_table.append(this.make_legend_trigger_row())

        // @ts-ignore
        multiselect_container.scrutiny_multiselect({
            selectables: legend_table.find("tr:not(.xaxis):not(.trigger_row)"),
        })

        // Takes the legend jquery row object and tells the dataset index of this element
        function get_dataset_index_from_row(row: JQueryRow): number {
            const dataset_index_str = row.attr("dataset-index") as string
            const dataset_index = parseInt(dataset_index_str)
            if (isNaN(dataset_index)) {
                throw "Dataset index is not parsable " + dataset_index_str
            }
            return dataset_index
        }

        // Event handling. We simply update the "selected_index" set based on SELECT/UNSELECT event.
        // The SELECT and UNSELECT events are thrown at the container. The selected elements are in the event data
        multiselect_container.on(multiselect.EVENT_SELECT, function (e: any, data: multiselect.SelectEventData) {
            const rows = data.items as JQuery<HTMLTableRowElement>
            for (let i = 0; i < rows.length; i++) {
                that.selected_datasets.add(get_dataset_index_from_row(rows.eq(i)))
            }
            that.update_chart_after_legend_select()
        })

        multiselect_container.on(multiselect.EVENT_UNSELECT, function (e: any, data: multiselect.UnselectEventData) {
            const rows = data.items as JQuery<HTMLTableRowElement>
            for (let i = 0; i < rows.length; i++) {
                that.selected_datasets.delete(get_dataset_index_from_row(rows.eq(i)))
            }
            that.update_chart_after_legend_select()
        })
    }

    /**
     * When the user clicks on something in the legend, it changes the display of the chart.
     * We update the chart here. Show/hides scales. Emphasis scales and plotted lines
     */
    update_chart_after_legend_select() {
        const that = this
        if (this.chart === null) {
            throw "No chart available"
        }

        // Based on dataset_index set, we highlight lines and scale
        for (let dataset_index = 0; dataset_index < this.chart.data.datasets.length; dataset_index++) {
            const row = this.legend_zone.find(`tr[dataset-index="${dataset_index}"]`)
            if (this.selected_datasets.has(dataset_index)) {
                const dataset = this.chart.data.datasets[dataset_index]
                const scale_options = this.get_dataset_scale_options(dataset_index)
                dataset.borderWidth = FOCUSED_LINE_WIDTH
                row.addClass("selected")
                set_nested(scale_options, ["ticks", "font", "weight"], "bold")
                set_nested(scale_options, ["ticks", "color"], FOCUSED_TICKS_COLOR)
                set_nested(scale_options, ["grid", "display"], true)
            } else {
                const dataset = this.chart.data.datasets[dataset_index]
                const scale_options = this.get_dataset_scale_options(dataset_index)
                dataset.borderWidth = DEFAULT_LINE_WIDTH
                row.removeClass("selected")
                set_nested(scale_options, ["ticks", "font", "weight"], "normal")
                set_nested(scale_options, ["ticks", "color"], DEFAULT_TICKS_COLOR)
                set_nested(scale_options, ["grid", "display"], false)
            }
        }

        // Make sure at least one grid is always visible. Show the first possible
        if (this.selected_datasets.size == 0) {
            for (let i = 0; i < this.chart.data.datasets.length; i++) {
                if (this.chart.isDatasetVisible(i)) {
                    const scale_options = this.get_dataset_scale_options(0)
                    set_nested(scale_options, ["grid", "display"], true)
                    break
                }
            }
        }

        // Update graph after UI update
        setTimeout(function () {
            if (that.chart !== null) {
                that.chart.update()
            }
        })
    }

    /**
     * Display the graph after getting the content of the acquisition by the server
     * @param data The graph data message gotten by the server after a read_acquisition_content request
     */
    show_acquisition_data(data: API.Message.S2C.ReadDataloggingAcquisitionContent) {
        const that = this
        this.switch_to_graph()
        this.clear_graph()
        const canvas = $("<canvas></canvas>") as JQuery<HTMLCanvasElement>
        this.graph_zone.html("")
        this.graph_zone.append(canvas)

        // Let's create a Chart.js configuration
        const config = {} as ChartConfiguration
        config.type = "line"
        config.options = {
            responsive: true,
            maintainAspectRatio: false,
        }
        config.options.layout = { padding: 0 }
        config.options.animation = { duration: 0 }

        config.options.interaction = {
            intersect: false,
            mode: "index", // mode = "x" cause duplicate label. bug?
            axis: "x",
        }

        config.options.plugins = {}
        config.options.plugins.tooltip = {
            position: "nearest",
            enabled: false,
        }

        // Custom plugin that removes axes when all attached signals are hidden
        // @ts-ignore
        config.options.plugins[RemoveUnusedAxesPlugin.id] = { enabled: true }
        // @ts-ignore

        if (data["trigger_index"] !== null) {
            // Custom plugin that draw a line on the trigger sample
            // @ts-ignore
            config.options.plugins[DrawTriggerPlugin.id] = {
                enabled: true,
                point_index: data["trigger_index"],
                xaxis_id: "x",
            }
        }

        // We hide the legend provided by Chart.js because we makes our own custom legend in HTML
        config.options.plugins.legend = {
            display: false,
        }

        config.options.plugins.zoom = {
            zoom: {
                wheel: {
                    enabled: true,
                },
                drag: {
                    enabled: true,
                },
                mode: this.zoom_dir,
                scaleMode: "xy",
            },
            pan: {
                enabled: true,
                modifierKey: "ctrl",
            },
        }

        config.data = {
            labels: [],
            datasets: [],
        }

        config.options.elements = {
            line: {
                tension: 0,
                borderWidth: DEFAULT_LINE_WIDTH,
            },
            point: {
                pointStyle: "circle",
                radius: 0,
                hoverRadius: 4,
            },
        }

        config.options.transitions = {
            active: {
                animation: {
                    duration: 0,
                },
            },
        }

        config.options.scales = {}
        // Y - Axis
        for (let i = 0; i < data.yaxis.length; i++) {
            const yaxis = data.yaxis[i]
            const scale_id = `yaxis_${yaxis.id}`
            config.options.scales[scale_id] = {
                type: "linear",
                position: "left",
                ticks: {
                    callback: function (val): string | number {
                        if (typeof val !== "number") {
                            return val
                        }
                        if (val.toString().length > 5) {
                            return val.toExponential(2)
                        }
                        return val
                    },
                    color: DEFAULT_TICKS_COLOR,
                    font: {
                        size: 11,
                    },
                },
                grid: {
                    display: i == 0,
                },
                title: {
                    display: false,
                    text: yaxis.name,
                    align: "end",
                },
            }
            set_nested(config.options.plugins, ["zoom", "limits", scale_id], { min: "original", max: "original" })
        }

        // X - Axis
        config.options.scales["x"] = {
            type: "linear",
            title: {
                display: true,
                text: data.xdata.name,
            },
        }
        set_nested(config.options.plugins, ["zoom", "limits", "x"], { min: "original", max: "original" })

        // Dataseries
        for (let i = 0; i < data.signals.length; i++) {
            const signal = data.signals[i]
            const scale_id = `yaxis_${signal.axis_id}`
            const dataset = {
                label: signal.name,
                data: signal.data,
                yAxisID: scale_id,
                xAxisID: "x",
            } as ChartDataset<"line", number[]>
            config.data.datasets.push(dataset)
        }

        // X-axis values goes in the labels property
        config.data.labels = data.xdata.data

        // OnHover function to write the value of the datasets inside the legend box
        config.options.onHover = function (e, elements, chart: Chart) {
            let index: number | null = null
            // For each signal being hovered (all of them because interaction mode is intersect)
            for (let i = 0; i < elements.length; i++) {
                const element = elements[i]
                if (index !== null && index !== element.index) {
                    throw "Active element does not have the same active index"
                }
                index = element.index
                const val_label = that.legend_zone.find(`tr[dataset-index='${element.datasetIndex}'] p.legend_val`)
                if (val_label.length > 0) {
                    const dataset = chart.data.datasets[element.datasetIndex]
                    const val = dataset.data[index]
                    val_label.text("" + val)
                } else {
                    that.logger.error("Cannot write value to legend")
                }
            }

            // Write x-axis value
            if (index !== null && typeof chart.data.labels !== "undefined") {
                const xaxis_label = that.legend_zone.find("tr.xaxis p.legend_val")
                xaxis_label.text(chart.data.labels[index] as string)
            }
        }
        this.chart = new Chart(canvas[0], config)
        this.chart.update() // Draw the graph
        this.build_legend() // Generates the legend in HTML in the split pane
    }

    /**
     * Adds an axis in the signal list pane (where the user drops element)
     * Axes are treetable root nodes.
     */
    add_axis() {
        const signal_list_table = this.container.find("table.signal-list") as ScrutinyTreeTable

        const axis_rows = signal_list_table.scrutiny_treetable("get_root_nodes")
        let axis_name: string[] = []
        for (let i = 0; i < axis_rows.length; i++) {
            axis_name.push(trim($(axis_rows[i]).text(), " "))
        }

        // Gives a unique numbered name by default
        let axis_number = 1
        let already_exist = false
        let axis_name_candidate = ""
        do {
            already_exist = false
            axis_name_candidate = "Axis " + axis_number
            for (let i = 0; i < axis_name.length; i++) {
                if (axis_name[i] == axis_name_candidate) {
                    already_exist = true
                    break
                }
            }
            axis_number++
        } while (already_exist)

        // Create the table line to add
        const tr = $(
            `<tr class="${CLASS_AXIS_ROW}"><td><div class="${CLASS_LIVE_EDIT_CONTENT}">${axis_name_candidate}</div></td></tr>`
        ) as JQueryLiveEdit<HTMLTableRowElement>
        tr.live_edit("init")

        // Call the treetable plugin to add this axis line
        signal_list_table.scrutiny_treetable(
            "add_root_node",
            `axisid-${this.next_axis_id}`,
            tr,
            false, // Children allowed. Children are the signal themselves
            true // No drag
        )

        this.next_axis_id++
    }

    /**
     * Sets the configuration form in it's "unavailable". USed when no device or device does not support datalogging
     */
    set_config_no_datalogging() {
        this.get_sampling_rate_select().html("<option>N/A</option>")
        this.get_xaxis_type_select().find('option[value="ideal_time"]').attr("disabled", "disabled")
        this.set_effective_sampling_rate("N/A")
    }

    get_config_table(): JQuery<HTMLTableElement> {
        return this.graph_config_div.find("table.config-table:first") as JQuery<HTMLTableElement>
    }

    get_signal_list_table(): ScrutinyTreeTable {
        return this.graph_config_div.find("table.signal-list:first") as ScrutinyTreeTable
    }

    get_config_name_input(): JQuery<HTMLInputElement> {
        return this.get_config_table().find("input[name='config_name']") as JQuery<HTMLInputElement>
    }

    get_sampling_rate_select(): JQuery<HTMLSelectElement> {
        return this.get_config_table().find('select[name="sampling_rate"]') as JQuery<HTMLSelectElement>
    }

    get_decimation_input(): JQuery<HTMLInputElement> {
        return this.get_config_table().find('input[name="decimation"]') as JQuery<HTMLInputElement>
    }

    get_probe_location_input(): JQuery<HTMLInputElement> {
        return this.get_config_table().find('input[name="probe_location"]') as JQuery<HTMLInputElement>
    }

    get_timeout_input(): JQuery<HTMLInputElement> {
        return this.get_config_table().find('input[name="timeout"]') as JQuery<HTMLInputElement>
    }

    get_xaxis_type_select(): JQuery<HTMLSelectElement> {
        return this.get_config_table().find('select[name="xaxis_type"]') as JQuery<HTMLSelectElement>
    }

    get_xaxis_watchable_input(): JQueryObjTextbox {
        return this.get_config_table().find(".xaxis-watchable-objtextox") as JQueryObjTextbox
    }

    get_trigger_type_select(): JQuery<HTMLSelectElement> {
        return this.get_config_table().find('select[name="trigger_type"]') as JQuery<HTMLSelectElement>
    }

    get_hold_time_input(): JQuery<HTMLInputElement> {
        return this.get_config_table().find('input[name="trigger_hold_time"]') as JQuery<HTMLInputElement>
    }

    get_operand1_input(): JQueryObjTextbox {
        return this.get_config_table().find("div.operand1") as JQueryObjTextbox
    }

    get_operand2_input(): JQueryObjTextbox {
        return this.get_config_table().find("div.operand2") as JQueryObjTextbox
    }

    get_operand3_input(): JQueryObjTextbox {
        return this.get_config_table().find("div.operand3") as JQueryObjTextbox
    }

    get_selected_operand_from_operand_objtextbox(input: JQueryObjTextbox): API.Datalogging.Operand | null {
        const operand = {} as API.Datalogging.Operand
        if (input.scrutiny_objtextbox("is_text_mode")) {
            const val = input.scrutiny_objtextbox("get_text") as string
            let val_num = 0
            if (val.search(".") != -1) {
                val_num = parseFloat(val)
            } else {
                val_num = parseInt(val)
            }
            if (isNaN(val_num)) {
                return null
            }
            operand.type = "literal"
            operand.value = val_num
        } else {
            const name_entry_pair = input.scrutiny_objtextbox("get_obj") as NameEntryPair
            operand.type = "watchable"
            operand.value = name_entry_pair.entry.server_id
        }
        return operand
    }

    get_selected_operand1(): API.Datalogging.Operand | null {
        return this.get_selected_operand_from_operand_objtextbox(this.get_operand1_input())
    }
    get_selected_operand2(): API.Datalogging.Operand | null {
        return this.get_selected_operand_from_operand_objtextbox(this.get_operand2_input())
    }
    get_selected_operand3(): API.Datalogging.Operand | null {
        return this.get_selected_operand_from_operand_objtextbox(this.get_operand3_input())
    }

    get_selected_config_name() {
        return trim(this.get_config_name_input().val() as string, " ")
    }

    get_selected_sampling_rate(): API.Datalogging.SamplingRate | null {
        const val = parseInt(this.get_sampling_rate_select().val() as string)
        if (isNaN(val)) {
            return null
        }

        if (this.app.server_conn.datalogging_capabilities == null) {
            return null
        }

        if (val >= this.app.server_conn.datalogging_capabilities.sampling_rates.length) {
            return null
        }

        return this.app.server_conn.datalogging_capabilities.sampling_rates[val]
    }

    /**
     * Gets the selected decimation
     * @returns The decimation or null if invalid
     */
    get_selected_decimation(): number | null {
        const input = this.get_decimation_input()
        const val = parseInt(input.val() as string)
        if (isNaN(val)) {
            return null
        }

        if (val < MIN_DECIMATION || val > MAX_DECIMATION) {
            return null
        }
        return val
    }

    set_effective_sampling_rate(val: string | number) {
        if (typeof val === "number") {
            val = number2str(val, 3) + " Hz"
        }
        this.get_config_table().find('input[name="effective_sampling_rate"]').val(val)
    }

    /**
     * Gets the selected probe location
     * @returns The probe location or null if invalid
     */
    get_selected_probe_location(): number | null {
        const input = this.get_probe_location_input()
        const val = parseInt(input.val() as string)
        if (isNaN(val)) {
            return null
        }

        if (val < MIN_PROBE_LOCATION || val > MAX_PROBE_LOCATION) {
            return null
        }
        return val
    }

    /**
     * Gets the selected timeout
     * @returns The timeout or null if invalid
     */
    get_selected_timeout_sec(): number | null {
        const input = this.get_timeout_input()
        const val = parseFloat(input.val() as string)
        if (isNaN(val)) {
            return null
        }

        if (val < MIN_TIMEOUT_SEC || val > MAX_TIMEOUT_SEC) {
            return null
        }
        return val
    }

    get_selected_xaxis_type(): API.Datalogging.XAxisType {
        return this.get_xaxis_type_select().val() as API.Datalogging.XAxisType
    }

    get_xaxis_watchable_val(): NameEntryPair | null {
        const val = WatchableTextbox.get(this.get_xaxis_watchable_input())
        if (typeof val !== "object") {
            return null
        }
        return val
    }

    /**
     * Gets the trigger type selected by the user
     * @returns The trigger type selected by the user
     */
    get_selected_trigger_type(): API.Datalogging.TriggerType {
        const trigger_type = this.get_trigger_type_select().val() as API.Datalogging.TriggerType
        if (!NB_OPERANDS_MAP.hasOwnProperty(trigger_type)) {
            if (trigger_type == null) {
                throw "Unsupported trigger type"
            }
        }
        return trigger_type
    }

    /**
     * Gets the list of signal to be acquired dropped by the user in the drag n' drop region
     */
    get_configured_signal_config(): SignalTableConfig {
        const signal_config = { signals: [], yaxis: [] } as SignalTableConfig

        const treetable = this.get_signal_list_table()
        // Axes are treetable root nodes
        const root_nodes = treetable.scrutiny_treetable("get_root_nodes") as JQueryRow
        for (let i = 0; i < root_nodes.length; i++) {
            signal_config.yaxis.push({
                id: i,
                name: root_nodes.eq(i).text(),
            })

            const children = treetable.scrutiny_treetable("get_children", root_nodes.eq(i)) as JQueryRow
            for (let j = 0; j < children.length; j++) {
                signal_config.signals.push({ axis_id: i, row: children.eq(j) })
            }
        }

        return signal_config
    }

    /**
     * Gets the selected hold time
     * @returns The hold time or null if invalid
     */
    get_selected_hold_time_millisec(): number | null {
        const input = this.get_hold_time_input()
        const val = parseFloat(input.val() as string)
        if (isNaN(val)) {
            return null
        }

        if (val < MIN_HOLD_TIME_MS || val > MAX_HOLD_TIME_MS) {
            return null
        }
        return val
    }

    /**
     * Reads the device capabilities in term of datalogging from the server comm module and <
     * update any visual or internal variable based on it
     */
    update_config_capabilities() {
        const capabilities = this.app.server_conn.datalogging_capabilities
        if (capabilities == null) {
            this.set_config_no_datalogging()
            this.button_acquire.disable()
        } else {
            this.button_acquire.enable()
            let sr_select = this.get_sampling_rate_select()
            sr_select.html("") // Removes content
            for (let i = 0; i < capabilities.sampling_rates.length; i++) {
                let sr = capabilities.sampling_rates[i]
                let option = $("<option></option>")
                option.prop("value", sr.identifier)
                let sr_name = "<No name>"
                if (sr.name !== "") {
                    sr_name = sr.name
                }
                if (sr.type == "fixed_freq") {
                    option.text(number2str(sr.frequency as number, 3) + " Hz")
                } else if (sr.type == "variable_freq") {
                    option.text(`VF[${sr.identifier}] : ${sr_name}`)
                }
                sr_select.append(option)
            }
            sr_select.removeAttr("disabled")
        }
        this.update_estimated_duration()
        this.update_config_form()
    }

    /**
     * To be called everytime the configuration has changed. Will give the proper feedback to the user.
     */
    config_changed() {
        this.clear_config_error()
        this.update_config_form() // Change available choices
        this.update_estimated_duration()
    }

    /**
     * Update the graph configuration display. The form is dynamic based on user input, so we need to add/remove elements
     * and we also fixes any invalid values (example: clamping to min/max)
     */
    update_config_form() {
        const selected_xaxis_type = this.get_selected_xaxis_type()
        const trigger_type = this.get_selected_trigger_type()
        if (selected_xaxis_type == "signal") {
            this.get_config_table().find(".line-xaxis-signal").show()
        } else {
            this.get_config_table().find(".line-xaxis-signal").hide()
        }

        const nb_operands = NB_OPERANDS_MAP[trigger_type]
        const operand1 = this.get_config_table().find(".line-operand1") as JQuery<HTMLTableRowElement>
        const operand2 = this.get_config_table().find(".line-operand2") as JQuery<HTMLTableRowElement>
        const operand3 = this.get_config_table().find(".line-operand3") as JQuery<HTMLTableRowElement>

        if (nb_operands >= 1) {
            operand1.show()
        } else {
            operand1.hide()
        }

        if (nb_operands >= 2) {
            operand2.show()
        } else {
            operand2.hide()
        }

        if (nb_operands >= 3) {
            operand3.show()
        } else {
            operand3.hide()
        }

        let sampling_rate = this.get_selected_sampling_rate()
        if (sampling_rate !== null) {
            const ideal_time_option = this.get_xaxis_type_select().find("option[value='ideal_time']")
            if (sampling_rate.type == "variable_freq") {
                if (selected_xaxis_type == "ideal_time") {
                    this.get_xaxis_type_select().find("option[value='measured_time']").prop("selected", "selected")
                }
                ideal_time_option.attr("disabled", "disabled")
            } else {
                ideal_time_option.removeAttr("disabled")
            }

            let decimation = this.get_config_table().find("input[name='decimation']").val()
            decimation = parseInt(decimation as string)
            if (isNaN(decimation)) {
                decimation = 0
            }

            if (decimation > 0 && sampling_rate.type == "fixed_freq") {
                this.set_effective_sampling_rate((sampling_rate.frequency as number) / decimation)
            } else {
                this.set_effective_sampling_rate("N/A")
            }
        }
    }

    /**
     * Make sure the configuration form is valid, show an error message if it is not and generates
     * a request object to send to the server
     * @returns The request to send to the server based on the config form
     */
    validate_config_and_make_request(): Partial<API.Message.C2S.RequestDataloggingAcquisition> | null {
        this.clear_config_error()

        let valid = true
        const err_msg = $("<span></span>").addClass(CLASS_ERROR_MSG)

        //Graph name, default to Graph
        let config_name = this.get_selected_config_name()
        if (config_name === "null") {
            this.get_config_name_input().val("Graph")
            config_name = "Graph"
        }

        // Sampling rate, null if invalid
        const sampling_rate = this.get_selected_sampling_rate()
        if (sampling_rate == null) {
            valid = false
            const sr_select = this.get_sampling_rate_select()
            sr_select.addClass(CLASS_INPUT_ERROR)
            sr_select.after(err_msg.clone().text("Invalid value"))
        }

        //Decimation, null if invalid
        const decimation = this.get_selected_decimation()
        if (decimation == null) {
            const input = this.get_decimation_input()
            input.addClass(CLASS_INPUT_ERROR)
            input.after(err_msg.clone().text("Invalid value"))
            valid = false
        }

        // probe location (trigger position). Null if invalid
        const probe_location = this.get_selected_probe_location()
        if (probe_location == null) {
            const input = this.get_probe_location_input()
            input.addClass(CLASS_INPUT_ERROR)
            input.after(err_msg.clone().text("Invalid value"))
            valid = false
        }

        // Acquisition timeout. Null if invalid. 0 to ignore
        const timeout = this.get_selected_timeout_sec()
        if (timeout == null) {
            const input = this.get_timeout_input()
            input.addClass(CLASS_INPUT_ERROR)
            input.after(err_msg.clone().text("Invalid value"))
            valid = false
        }

        // Type of X-Axis + sampling rate selection.
        const xaxis_type = this.get_selected_xaxis_type()
        const xaxis_watchable = this.get_xaxis_watchable_val()
        let x_axis_signal: API.Datalogging.SignalDefinition | null = null
        if (xaxis_type == "ideal_time" && sampling_rate !== null) {
            if (sampling_rate.type == "variable_freq") {
                const select = this.get_xaxis_type_select()
                select.addClass(CLASS_INPUT_ERROR)
                select.after(err_msg.clone().text("Unavailable with variable frequency"))
                valid = false
            }
        } else if (xaxis_type === "signal") {
            if (xaxis_watchable === null) {
                const input = this.get_xaxis_watchable_input()
                input.addClass(CLASS_INPUT_ERROR)
                input.after(err_msg.clone().text("Missing watchable"))
                valid = false
            } else {
                x_axis_signal = {
                    id: xaxis_watchable.entry.server_id,
                    name: xaxis_watchable.name,
                }
            }
        }

        // Read the type of trigger selected by the user
        const trigger_type = this.get_selected_trigger_type()

        const hold_time_millisec = this.get_selected_hold_time_millisec()
        if (hold_time_millisec === null) {
            const input = this.get_hold_time_input()
            input.addClass(CLASS_INPUT_ERROR)
            input.after(err_msg.clone().text("Invalid value"))
            valid = false
        }

        // List of operands
        const operands_list: API.Datalogging.Operand[] = []

        // Expected operand count based on trigger type
        const nb_operands = NB_OPERANDS_MAP[trigger_type]
        if (nb_operands >= 1) {
            const operand = this.get_selected_operand1()
            if (operand === null) {
                const input = this.get_operand1_input()
                input.addClass(CLASS_INPUT_ERROR)
                input.after(err_msg.clone().text("Invalid value"))
                valid = false
            } else {
                operands_list.push(operand)
            }
        }

        if (nb_operands >= 2) {
            const operand = this.get_selected_operand2()
            if (operand === null) {
                const input = this.get_operand2_input()
                input.addClass(CLASS_INPUT_ERROR)
                input.after(err_msg.clone().text("Invalid value"))
                valid = false
            } else {
                operands_list.push(operand)
            }
        }

        if (nb_operands >= 3) {
            const operand = this.get_selected_operand3()
            if (operand === null) {
                const input = this.get_operand3_input()
                input.addClass(CLASS_INPUT_ERROR)
                input.after(err_msg.clone().text("Invalid value"))
                valid = false
            } else {
                operands_list.push(operand)
            }
        }

        // Read the list of watchable dragged in the Axis region
        const signal_list_table = this.get_signal_list_table()
        const signal_config = this.get_configured_signal_config()
        if (signal_config.yaxis.length == 0) {
            // Need at least one axis
            valid = false
            signal_list_table.before(err_msg.clone().text("Missing Y-Axis"))
        } else if (signal_config.signals.length == 0) {
            //Need at least one signal
            valid = false
            signal_list_table.before(err_msg.clone().text("Missing signals"))
        }

        // Get the datastore entry matching the element dropped by the user
        const signals = [] as API.Datalogging.AcquisitionRequestSignalDef[]
        for (let i = 0; i < signal_config.signals.length; i++) {
            const row = signal_config.signals[i].row
            const entry = WatchableTableInterface.get_entry_from_row(this.app.datastore, row)
            if (entry == null) {
                valid = false
                row.addClass(CLASS_INPUT_ERROR)
            } else {
                signals.push({
                    axis_id: signal_config.signals[i].axis_id,
                    id: entry.server_id,
                    name: WatchableTableInterface.get_name_cell(row).text(),
                })
            }
        }

        // If any of the user input is invalid, stop there and return null
        if (!valid) {
            return null
        }

        // The server wants a value in seconds
        const hold_time_sec = hold_time_millisec !== null ? hold_time_millisec / 1000.0 : 0.0

        // Build a request for the server
        let request: Partial<API.Message.C2S.RequestDataloggingAcquisition> = {
            name: config_name,
            sampling_rate_id: (sampling_rate as API.Datalogging.SamplingRate).identifier,
            decimation: decimation as number,
            probe_location: (probe_location as number) / 100.0,
            timeout: timeout as number,
            x_axis_type: xaxis_type,
            x_axis_signal: x_axis_signal,
            condition: trigger_type,
            operands: operands_list,
            trigger_hold_time: hold_time_sec,
            signals: signals,
            yaxis: signal_config.yaxis,
        }

        return request
    }

    /**
     * Remove any error message written to the user in case of bad configurations
     */
    clear_config_error() {
        this.container.find(`.${CLASS_INPUT_ERROR}`).removeClass(CLASS_INPUT_ERROR)
        this.container.find(`.${CLASS_ERROR_MSG}`).remove()
    }

    /**
     * Update the "estimated duration" label based on the actual configuration.
     * It is an estimation because only the server really knows and we don't ask him
     */
    update_estimated_duration(): void {
        const duration_label = this.container.find(".label-estimated-duration").first()
        let new_duration_label = "N/A"
        try {
            if (duration_label.length == 0) {
                return
            }

            // Can't compute anything if we don't know what we can do.
            if (this.app.server_conn.datalogging_capabilities != null) {
                const sampling_rate = this.get_selected_sampling_rate()
                const decimation = this.get_selected_decimation()
                const x_axis_type = this.get_selected_xaxis_type()
                const x_axis_signal = this.get_xaxis_watchable_val()
                const entry_id_set = new Set()
                if (this.app.server_conn.datalogging_capabilities.encoding == "raw") {
                    let size_per_sample = 0
                    if (x_axis_type == "measured_time") {
                        size_per_sample += 4
                    } else if (x_axis_type == "signal") {
                        if (x_axis_signal !== null) {
                            size_per_sample += this.get_typesize_bytes(x_axis_signal.entry.datatype)
                        }
                    }
                    // sampling rate and decimation will be null if invalid. frequency null if variable frequency rate
                    if (sampling_rate != null && decimation != null && sampling_rate.frequency !== null) {
                        const axis = this.get_signal_list_table().scrutiny_treetable("get_root_nodes")
                        let bad_entry = false
                        for (let i = 0; i < axis.length; i++) {
                            const signals_row = this.get_signal_list_table().scrutiny_treetable("get_children", axis.eq(i))
                            for (let j = 0; j < signals_row.length; j++) {
                                const entry = WatchableTableInterface.get_entry_from_row(this.app.datastore, signals_row.eq(j))
                                if (entry == null) {
                                    bad_entry = true
                                    break
                                }
                                // Do not count duplicates
                                if (!entry_id_set.has(entry.server_id)) {
                                    entry_id_set.add(entry.server_id)
                                    size_per_sample += this.get_typesize_bytes(entry.datatype)
                                }
                            }
                            if (bad_entry) {
                                break
                            }
                        }
                        if (!bad_entry && size_per_sample > 0) {
                            const nb_samples = Math.floor(this.app.server_conn.datalogging_capabilities.buffer_size / size_per_sample - 1)
                            if (nb_samples > 0) {
                                let duration = (nb_samples / sampling_rate.frequency) * decimation
                                let units = "seconds"

                                if (duration < 1) {
                                    duration *= 1000
                                    units = "milliseconds"
                                }

                                if (duration < 1) {
                                    duration *= 1000
                                    units = "microseconds"
                                }

                                new_duration_label = `${duration.toFixed(1)} ${units} (${nb_samples} samples)`
                            }
                        }
                    }
                }
            }
        } catch (e) {
            this.logger.error("Cannot compute estimated duration.", e)
            new_duration_label = "N/A"
        }

        if (duration_label.text() != new_duration_label) {
            duration_label.text(new_duration_label)
        }
    }

    /**
     * Gets the data size in byte of a given data type
     * @param dtype A datatype provided by the server
     * @returns The size in byte of this datatype
     */
    get_typesize_bytes(dtype: API.ValueDataType): number {
        const TYPEMAP = {
            sint8: 1,
            sint16: 2,
            sint32: 4,
            sint64: 8,
            sint128: 16,
            sint256: 32,
            uint8: 1,
            uint16: 2,
            uint32: 4,
            uint64: 8,
            uint128: 16,
            uint256: 32,
            float8: 1,
            float16: 2,
            float32: 4,
            float64: 8,
            float128: 16,
            float256: 32,
            cfloat8: 1,
            cfloat16: 2,
            cfloat32: 4,
            cfloat64: 8,
            cfloat128: 16,
            cfloat256: 32,
            boolean: 1,
        }

        if (!TYPEMAP.hasOwnProperty(dtype)) {
            throw "Cannot determine data type size from type " + dtype
        }

        return TYPEMAP[dtype]
    }

    // Everything below this is app integration boilerplate

    /**
     * Resize is called by the UI when the layout changes
     */
    resize() {
        const parent = this.layout_content_div.parent() as JQuery<HTMLDivElement>
        const top_delta = (this.layout_content_div.offset()?.top as number) - (parent.offset()?.top as number)
        this.layout_content_div.outerHeight((parent.innerHeight() as number) - top_delta)

        if (this.active_tab == "graph") {
            // Leave some room for the legend on the right.
            this.graph_zone.width((this.layout_content_div.innerWidth() as number) - (this.legend_zone.outerWidth() as number))
        }
    }

    destroy() {}

    static widget_name() {
        return "graph"
    }
    static display_name() {
        return "Embedded Graph"
    }

    static icon_path() {
        return "assets/img/graph-96x128.png"
    }

    static css_list() {
        return ["graph.css", "treetable-theme.css"]
    }

    static templates() {
        return {
            layout: "templates/layout.html",
            config_form_pane: "templates/config_form_pane.html",
            signal_list_pane: "templates/signal_list_pane.html",
        }
    }
}
